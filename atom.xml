<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[LvShaco Blog]]></title>
  <subtitle><![CDATA[程序员与游戏]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lvshaco.github.io/"/>
  <updated>2016-04-07T02:50:47.000Z</updated>
  <id>http://lvshaco.github.io/</id>
  
  <author>
    <name><![CDATA[lvshaco]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[osX Yosemite (10.10.3) 上安装valgrind]]></title>
    <link href="http://lvshaco.github.io/2016/04/07/osX%20Yosemite%20(10.10.3)%20%E4%B8%8A%E5%AE%89%E8%A3%85valgrind/"/>
    <id>http://lvshaco.github.io/2016/04/07/osX Yosemite (10.10.3) 上安装valgrind/</id>
    <published>2016-04-07T02:50:47.000Z</published>
    <updated>2016-04-07T02:50:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="brew_安装出错">brew 安装出错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install valgrind&#10;valgrind: OS X Mavericks or older is required.&#10;Error: An unsatisfied requirement failed this build.</span><br></pre></td></tr></table></figure>
<h3 id="从源码安装">从源码安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn co svn://svn.valgrind.org/valgrind/trunk valgrind&#10;cd valgrind&#10;./autogen.sh&#10;./configure --prefix=/usr/local&#10;make &#38;&#38; make install</span><br></pre></td></tr></table></figure>
<h3 id="从源码安装需要解决的问题">从源码安装需要解决的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ld: cannot found  -lgcc_s.10.5&#10;&#10;# &#26597;&#25214;&#27492;&#21160;&#24577;&#24211;&#30340;&#36335;&#24452;&#10;sudo find / -iname libgcc_s.10.5.dylib &#10;# &#23558;&#25214;&#21040;&#30340;&#36335;&#24452;&#21152;&#20837;&#32534;&#35793;&#26102;&#21160;&#24577;&#24211;&#26597;&#25214;&#36335;&#24452;&#10;export LIBRARY_PATH=&#34;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/lib/&#34;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="brew_安装出错">brew 安装出错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></t]]>
    </summary>
    
      <category term="tool" scheme="http://lvshaco.github.io/tags/tool/"/>
    
      <category term="tool" scheme="http://lvshaco.github.io/categories/tool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mysql的一次优化]]></title>
    <link href="http://lvshaco.github.io/2016/04/05/mysql%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BC%98%E5%8C%96/"/>
    <id>http://lvshaco.github.io/2016/04/05/mysql的一次优化/</id>
    <published>2016-04-05T03:21:42.000Z</published>
    <updated>2016-04-05T03:21:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="背景">背景</h3><p>服务器在我自己的macpro上登录是没有压力的，1000人登录完成大概在5左右，登录创建大概是8秒，基本达标。但是转移到外网压力测试机器上创建登录却达到了好几分钟，看日志一直可以以正常的速度看到save日志（保存到数据库）。后面也可以看到，一但全部1000人正常创建后，下次1000人登录在4秒以内。</p>
<h3 id="数据库版本">数据库版本</h3><p>一开始我对比了数据库版本，mac下时5.6，linux是5.1.7 (centos 6.7 final)。网上查了下版本对比，性能是有提升，20%，但不至于差那么多。不管怎样先升级再说，至少可以对比下配置。升级完后，查看了几个比较关键的参数，都是默认的一样。</p>
<h3 id="压力测试对比">压力测试对比</h3><p>mysqlslap：mysql自带的工具压力测试</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqlslap <span class="operator">-a</span> --engine=myisam,innodb --auto-generate-sql-load-type=<span class="built_in">read</span></span><br><span class="line">--number-of-queries <span class="number">1000</span> --iterations=<span class="number">5</span> -uroot -people</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>read</th>
<th style="text-align:right">myisam</th>
<th style="text-align:center">innodb</th>
</tr>
</thead>
<tbody>
<tr>
<td>macpro</td>
<td style="text-align:right">0.08</td>
<td style="text-align:center">0.1</td>
</tr>
<tr>
<td>linux</td>
<td style="text-align:right">0.15</td>
<td style="text-align:center">0.2</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqlslap <span class="operator">-a</span> --engine=myisam,innodb --auto-generate-sql-load-type=write</span><br><span class="line">--number-of-queries <span class="number">1000</span> --iterations=<span class="number">5</span> -uroot -people</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>write</th>
<th style="text-align:right">myisam</th>
<th style="text-align:center">innodb</th>
</tr>
</thead>
<tbody>
<tr>
<td>macpro</td>
<td style="text-align:right">0.04</td>
<td style="text-align:center">0.1</td>
</tr>
<tr>
<td>linux</td>
<td style="text-align:right">0.03</td>
<td style="text-align:center">50</td>
</tr>
</tbody>
</table>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqlslap <span class="operator">-a</span> --engine=myisam,innodb --auto-generate-sql-load-type=update</span><br><span class="line">--number-of-queries <span class="number">1000</span> --iterations=<span class="number">5</span> -uroot -people</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>update</th>
<th style="text-align:right">myisam</th>
<th style="text-align:center">innodb</th>
</tr>
</thead>
<tbody>
<tr>
<td>macpro</td>
<td style="text-align:right">0.5</td>
<td style="text-align:center">0.1</td>
</tr>
<tr>
<td>linux</td>
<td style="text-align:right">0.3</td>
<td style="text-align:center">50</td>
</tr>
</tbody>
</table>
<p>innodb在写操作达到惊人的500倍数。。。又对比了下双方innodb的一些关键参数，一样。你tm在逗我，这不会是磁盘坏的吧。。。</p>
<h3 id="磁盘io读写测试">磁盘io读写测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">＃ 写文件到当前目录</span><br><span class="line">time dd <span class="keyword">if</span>=/dev/zero of=<span class="number">10</span>Gb.file bs=<span class="number">1024</span> count=<span class="number">10000000</span></span><br><span class="line">＃ 从当前目录<span class="number">10</span>Gb.file读取</span><br><span class="line">time dd <span class="keyword">if</span>=<span class="number">10</span>Gb.file bs=<span class="number">64</span>k |dd of=/dev/null</span><br><span class="line">＃ sar观察磁盘io</span><br><span class="line">sar <span class="operator">-d</span> <span class="number">1</span> -p</span><br></pre></td></tr></table></figure>
<p>写的观察结果如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      		DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">      		sda     <span class="number">405.56</span>     <span class="number">0.00</span>    <span class="number">415288.89</span>     <span class="number">1024</span>      <span class="number">158.71</span>     <span class="number">395.91</span>     <span class="number">2.74</span>     <span class="number">111.11</span></span><br><span class="line">VolGroup-lv_root    <span class="number">54613.33</span>   <span class="number">0.00</span>    <span class="number">436906.73</span>      <span class="number">8.00</span>      <span class="number">20311.46</span>   <span class="number">376.25</span>     <span class="number">0.02</span>     <span class="number">111.11</span></span><br><span class="line">VolGroup-lv_swap    <span class="number">0.00</span>     <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      	<span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span></span><br><span class="line">VolGroup-lv_home    <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>       <span class="number">0.00</span>      <span class="number">0.00</span></span><br></pre></td></tr></table></figure>
<p>之后又到mysql的data目录测试也是一样很快，看来不是磁盘坏了，呵呵</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">"%dir%"</span>;</span><br><span class="line">datadir ｜ /var/lib/mysql/</span><br></pre></td></tr></table></figure>
<p>再看看用mysqlslap写时候的数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      		DEV       tps  rd_sec/s  wr_sec/s  avgrq-sz  avgqu-sz     await     svctm     %util</span><br><span class="line">      		sda     <span class="number">126.26</span>      <span class="number">0.00</span>    <span class="number">824.24</span>     <span class="number">6.53</span>      <span class="number">1.01</span>     <span class="number">8.02</span>     <span class="number">7.97</span>     <span class="number">100.61</span></span><br><span class="line">VolGroup-lv_root     <span class="number">103.03</span>      <span class="number">0.00</span>    <span class="number">824.24</span>      <span class="number">8.00</span>      <span class="number">1.01</span>      <span class="number">9.82</span>      <span class="number">9.76</span>     <span class="number">100.61</span></span><br><span class="line">VolGroup-lv_swap      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span></span><br><span class="line">VolGroup-lv_home      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span>      <span class="number">0.00</span></span><br></pre></td></tr></table></figure>
<p>sar结果具体参数网摘如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">参数-p可以打印出sda,hdc等磁盘设备名称,如果不用参数-p,设备节点则有可能是dev8-<span class="number">0</span>,dev22-<span class="number">0</span></span><br><span class="line"></span><br><span class="line">tps:每秒从物理磁盘I/O的次数.多个逻辑请求会被合并为一个I/O磁盘请求,一次传输的大小是不确定的.</span><br><span class="line">rd_sec/s:每秒读扇区的次数.</span><br><span class="line"></span><br><span class="line">wr_sec/s:每秒写扇区的次数.</span><br><span class="line"></span><br><span class="line">avgrq-sz:平均每次设备I/O操作的数据大小(扇区).</span><br><span class="line"></span><br><span class="line">avgqu-sz:磁盘请求队列的平均长度.</span><br><span class="line"></span><br><span class="line">await:从请求磁盘操作到系统完成处理,每次请求的平均消耗时间,包括请求队列等待时间,单位是毫秒(<span class="number">1</span>秒=<span class="number">1000</span>毫秒).</span><br><span class="line"></span><br><span class="line">svctm:系统处理每次请求的平均时间,不包括在请求队列中消耗的时间.</span><br><span class="line"></span><br><span class="line">%util:I/O请求占CPU的百分比,比率越大,说明越饱和.</span><br></pre></td></tr></table></figure>
<p>对比一下就可以得到有意义的数据</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wr_sec/s：差距巨大</span><br><span class="line">avgqu-sz：几乎为<span class="number">1</span>，本身说明io请求就是一个接着一个，很快联想到innodb的一个重要参数</span><br><span class="line">innodb_flush_<span class="built_in">log</span>_at_trx_commit 默认设置的是<span class="number">1</span> 也就是同步刷新<span class="built_in">log</span></span><br><span class="line">avgrq-sz：相比较小（同步的话，每次数据io很小）</span><br><span class="line">await：相比较短（同步的话，就不用再队列中等待了）</span><br><span class="line">svctm：相比较长（因为不包括队列中时间，同步的话就显长了）</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; <span class="built_in">set</span> global innodb_flush_<span class="built_in">log</span>_at_trx_commit=<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>一切就顺滑如飞了<br>ps: 务必在/etc/my.cnf ［mysqld]下面添加否则重启实效。</p>
<p>参考：</p>
<p><a href="http://imysql.com/2016/01/13/mysql-optimization-case-howto-find-performance-bottleneck.shtml" target="_blank" rel="external">优化系列 | 实例解析MySQL性能瓶颈排查定位</a></p>
<p><a href="http://xstarcd.github.io/wiki/MySQL/mysqlslap.html" target="_blank" rel="external">MySQL自带的性能压力测试工具mysqlslap</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="背景">背景</h3><p>服务器在我自己的macpro上登录是没有压力的，1000人登录完成大概在5左右，登录创建大概是8秒，基本达标。但是转移到外网压力测试机器上创建登录却达到了好几分钟，看日志一直可以以正常的速度看到save日志（保存到数据库）。后面也可以看]]>
    </summary>
    
      <category term="mysql" scheme="http://lvshaco.github.io/tags/mysql/"/>
    
      <category term="数据库" scheme="http://lvshaco.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://lvshaco.github.io/2016/01/24/hello-world/"/>
    <id>http://lvshaco.github.io/2016/01/24/hello-world/</id>
    <published>2016-01-24T13:32:15.000Z</published>
    <updated>2016-01-24T13:32:15.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[this is description]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim清扫]]></title>
    <link href="http://lvshaco.github.io/2015/07/17/vim%E6%B8%85%E6%89%AB/"/>
    <id>http://lvshaco.github.io/2015/07/17/vim清扫/</id>
    <published>2015-07-17T07:08:15.000Z</published>
    <updated>2015-07-17T07:08:15.000Z</updated>
    <content type="html"><![CDATA[<p>今天把vim的插件都清理掉了，干干净净^_^</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天把vim的插件都清理掉了，干干净净^_^</p>
]]>
    </summary>
    
      <category term="vim" scheme="http://lvshaco.github.io/tags/vim/"/>
    
      <category term="tool" scheme="http://lvshaco.github.io/categories/tool/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[cocos2dx中的坑]]></title>
    <link href="http://lvshaco.github.io/2015/07/10/cocos2dx%E4%B8%AD%E7%9A%84%E5%9D%91/"/>
    <id>http://lvshaco.github.io/2015/07/10/cocos2dx中的坑/</id>
    <published>2015-07-10T12:53:11.000Z</published>
    <updated>2015-07-10T12:53:11.000Z</updated>
    <content type="html"><![CDATA[<h4 id="1-_tmx地块图片文件支持相对路径，但是却没有对-,-此类相对路径符号过滤处理，导致后面android中打开资源失败。">1. tmx地块图片文件支持相对路径，但是却没有对..,.此类相对路径符号过滤处理，导致后面android中打开资源失败。</h4><blockquote>
<p>注意 AAssetManager_open中打开的文件必须是相对于assets的绝对路径，不能包含..，.符号，AAssetManager_open内部实现会在此路径前附加assets/，并且使用字符串完全匹配，即使是/改为\也跪。</p>
</blockquote>
<p>代码：CTMXXMLParser.cpp中解析tmx文件中<image source="图片路径" <figure="" class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">else if (elementName == &#34;image&#34;)&#10;&#123;&#10;    TMXTilesetInfo* tileset = tmxMapInfo-&#62;getTilesets().back();&#10;&#10;    // build full path&#10;    std::string imagename = attributeDict[&#34;source&#34;].asString();&#10;&#10;    if (_TMXFileName.find_last_of(&#34;/&#34;) != string::npos)&#10;    &#123;&#10;        string dir = _TMXFileName.substr(0, _TMXFileName.find_last_of(&#34;/&#34;) + 1);&#10;        tileset-&#62;_sourceImage = dir + imagename;&#10;    &#125;&#10;    else&#10;    &#123;&#10;        tileset-&#62;_sourceImage = _resources + (_resources.size() ? &#34;/&#34; : &#34;&#34;) + imagename;&#10;    &#125;&#10;&#125;</span><br></pre></td></tr></table></image></p>
<p>这里tmx文件包含路径，就要在内部图片文件前附加此路径。<br><em>处理办法是直接将这个判断除掉，并且内部图片文件直接填写相对于assets的路径，例如assets/img/map/1.png，就直接填img/map/1.png，这个文件名直接传递给AAssetManager_open。</em></p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="1-_tmx地块图片文件支持相对路径，但是却没有对-,-此类相对路径符号过滤处理，导致后面android中打开资源失败。">1. tmx地块图片文件支持相对路径，但是却没有对..,.此类相对路径符号过滤处理，导致后面android中打开资源失败。</h4><blo]]>
    </summary>
    
      <category term="cocos2dx" scheme="http://lvshaco.github.io/tags/cocos2dx/"/>
    
      <category term="引擎" scheme="http://lvshaco.github.io/categories/%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[入坑size_t不同平台大小不一]]></title>
    <link href="http://lvshaco.github.io/2015/07/10/%E5%85%A5%E5%9D%91size_t%E4%B8%8D%E5%90%8C%E5%B9%B3%E5%8F%B0%E5%A4%A7%E5%B0%8F%E4%B8%8D%E4%B8%80/"/>
    <id>http://lvshaco.github.io/2015/07/10/入坑size_t不同平台大小不一/</id>
    <published>2015-07-10T12:53:11.000Z</published>
    <updated>2015-07-10T12:53:11.000Z</updated>
    <content type="html"><![CDATA[<p>源码加密打包模块，发现fseek调用失败errno为22，折腾了好久。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size_t offset;&#10;fread(&#38;offset, 4, 1, fp);&#10;fseek(fp, offset, SEEK_SET);&#10;fprintf(stderr, &#34;%d&#34;, (int)offset);</span><br></pre></td></tr></table></figure></p>
<p>许久不用调试了，直接打印offset并没有超出文件大小，为何会失败。使劲折腾，猛然醒悟，这里offset使用size_t在64位机器为8字节，fread读取4自己，在这里高位为随机值，故offset实际超大。用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fprintf(stderr, &#34;%ld&#34;, offset);</span><br></pre></td></tr></table></figure></p>
<p>就会发现。<br>还是使用uint32_t offset为上。<br>这里记录下，给自己敲下脑袋。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>源码加密打包模块，发现fseek调用失败errno为22，折腾了好久。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="C" scheme="http://lvshaco.github.io/tags/C/"/>
    
      <category term="平台差异" scheme="http://lvshaco.github.io/tags/%E5%B9%B3%E5%8F%B0%E5%B7%AE%E5%BC%82/"/>
    
      <category term="语言" scheme="http://lvshaco.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lua中的_ENV]]></title>
    <link href="http://lvshaco.github.io/2015/07/10/lua%E4%B8%AD%E7%9A%84_ENV/"/>
    <id>http://lvshaco.github.io/2015/07/10/lua中的_ENV/</id>
    <published>2015-07-10T12:53:11.000Z</published>
    <updated>2015-07-10T12:53:11.000Z</updated>
    <content type="html"><![CDATA[<p>在lua中，至少从5.2开始就不再有全局变量:</p>
<blockquote>
<p>当你写a = 1的时候，其实被编译成 _ENV.a = 1</p>
</blockquote>
<p>但是一直以为_ENV是全局environment，其实不然，lua手册中说：</p>
<blockquote>
<p>every chunk is compiled in the scope of an external local variable called _ENV (see §3.3.2), so _ENV itself is never a global name in a chunk.</p>
</blockquote>
<p>这里的external local variable就是upvalue，也就是_ENV是当前chunk的upvalue。</p>
<blockquote>
<p>When Lua compiles a chunk, it initializes the value of its _ENV upvalue with the global environment (see load).</p>
</blockquote>
<p>当lua编译一个chunk的时候，如果不指定的话，默认使用全局environment初始化它的upvalue _ENV（其实就是引用），它是隐式声明的一个upvalue，看load声明：</p>
<blockquote>
<p>load (ld [, source [, mode [, env］])<br>loadfile ([filename [, mode [, env］])</p>
</blockquote>
<p>所以_ENV是语法糖，它在lua编译的作为upvalue被隐式声明，并且可以由外部指定。<br>通过下面代码可以验证：</p>
<h6 id="t-lua">t.lua</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local _env = &#123;tostring=tostring,print=print, debug=debug&#125; &#10;print (&#34;_ENV = &#34;..tostring(_ENV))                         &#10;print (&#34;_env = &#34;..tostring(_env))                         &#10;local f, err = loadfile(&#34;m.lua&#34;, &#34;bt&#34;, _env)              &#10;assert(f, err)                                            &#10;local m = f(f)                                            &#10;m.test()</span><br></pre></td></tr></table></figure>
<h6 id="m-lua">m.lua</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local f = ...                              &#10;local m = &#123;&#125;                               &#10;                                           &#10;function m.test()                          &#10;    local i =1                             &#10;    while true do                          &#10;        local n, v = debug.getupvalue(f, i)&#10;        if not n then                      &#10;            break                                                        &#10;        elseif n == &#34;_ENV&#34; then                &#10;            print (&#34;_ENV = &#34;..tostring(v)) &#10;            break                          &#10;        end                                &#10;        i = i+1                            &#10;    end                                    &#10;end                                        &#10;                                           &#10;return m</span><br></pre></td></tr></table></figure>
<h6 id="输出">输出</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ENV = table: 0x132f5f0&#10;_env  = table: 0x1335f90&#10;_ENV = table: 0x1335f90</span><br></pre></td></tr></table></figure>
<p>查看指令码可以看到SETUPVAL：</p>
<h6 id="t-lua-1">t.lua</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_ENV = nil</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ luac -l t.lua&#10;main &#60;t.lua:0,0&#62; (3 instructions at 0x245b3c0)&#10;0+ params, 2 slots, 1 upvalue, 0 locals, 0 constants, 0 functions&#10;        1       [47]    LOADNIL         0 0&#10;        2       [47]    SETUPVAL      0 0     ; _ENV&#10;        3       [47]    RETURN          0 1</span><br></pre></td></tr></table></figure>
<p>ps:<br>全局environment在C Registry(LUA_REGISTRYINDEX):LUA_RIDX_GLOBALS: At this index the registry has the global environment.<br>_G在初始化的时候被复制为全局environment。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在lua中，至少从5.2开始就不再有全局变量:</p>
<blockquote>
<p>当你写a = 1的时候，其实被编译成 _ENV.a = 1</p>
</blockquote>
<p>但是一直以为_ENV是全局environment，其实不然，lua手册中说：</p>]]>
    </summary>
    
      <category term="lua" scheme="http://lvshaco.github.io/tags/lua/"/>
    
      <category term="语言" scheme="http://lvshaco.github.io/categories/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
